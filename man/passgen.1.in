.Dd January 10, 2023
.Dt PASSGEN 1 URM
.Os Passgen v@PROJECT_VERSION@
.Sh NAME
.Nm passgen
.Nd Generate random sequences from a regex-like pattern.
.Sh SYNOPSIS
.Nm
.Op Fl ejz
.Op Fl a Ar amount
.Op Fl r Ar random
.Op Fl w Ar wordlist
.Ar pattern
.Nm
.Op Fl ejz
.Op Fl a Ar amount
.Op Fl r Ar random
.Op Fl w Ar wordlist
.Fl p
.Ar preset
.Nm
-l
.Op Fl j
| -v | -h
.Sh DESCRIPTION
Passgen is a tool for generating strong passphrases. Unlike other password
generators, it does not have presets, but rather supports a
regular-expression-like language for specifying the shape of the generated
passphrases.

In addition to that, it also supports reading wordlists and generating
passphrases based on those. It is also able to use a markov-chain to generate
pronounceable words.

Finally, it also supports a master-passphrase mode, whereby the passphrases it
generates are not fully random, but are deterministic. This allows for using it
as a password manager.

.Sh COMMAND-LINE FLAGS
.Pp
General flags and their descriptions
.Bl -tag -width -indent
.It Fl a, Fl -amount Ar amount
Set the amount of passphrases to generate. Must be a positive, non-zero
integer. By default, only a single passphrase is generated and output.
.It Fl e, Fl -entropy
Compute and output the entropy of every generated sequence. This is a number
that describes how much randomness went into generating a specific sequence. It
is used to measure the difficulty of cracking the sequence if the pattern is
known. The entropy is expressed as a power of two, meaning that if an entropy
of 64 is achieved, it means that an adversary would need 2^64 guesses to crack
the passphrase.
.It Fl h, Fl -help
Show help and quit.
.It Fl j, Fl -json
Outputs results as JSON instead of as text. This is useful when feeding the
output of passgen into other command-line tools.
.It Fl l, Fl -list
List available presets, along with their format strings.
.It Fl M, Fl -markov-length Ar length
Set the markov chain length for the next wordlist. Must be a positive, non-zero
integer. Every wordlist can be parsed into a markov chain in order to generate
pronounceable, but random sequences. The default length is 3. Longer markov
chains lengths may be able to generate more realistic words, at the expense of
taking longer to parse and using up more memory.
.It Fl p, Fl -preset Ar PRESET
Use the specified preset to generate a password.
.It Fl r, Fl -random Ar random
Overrides the randomness source. By default, Passgen will use the secure system
randomness source. On Linux, this means it will use the
.Ar getrandom(2)
syscall, on macOS it will use
.Ar arc4random(3) .
If it cannot detect an appropriate way to get randomness from the kernel, it falls back to using
.Ar /dev/urandom .
Using this flag, it is possible to override the source of randomness, see the
RANDOM section for more information.
.It Fl v, Fl -version
Show version and build information and quit.
.It Fl w, Fl -wordlist Ar name:/path/to/file
Load an additional wordlist. Must be specified in the format
.Ar name:/path/to/file .
Wordlists can be referenced in patterns, and can be used to generate passphrases
that are easier to remember.
.El

.Pp
Flags for master-passphrase mode. In this mode, the generated passphrases are not fully
random, but are deterministic. Given the same master passphrase, domain and token, the same
passphrase will always be generated. Domain and token are optional parameters.

The intention is that you pick one master passphrase. For every account you
have, you can use the domain field to set what domain it is on. If you have
multiple accounts on a single service, you can use the token to distinguish
between them.

.Bl -tag -width -indent
.It Fl m, Fl -master Ar master_passphrase
Master passphrase to use, required for enabling master-passphrase mode.
.It Fl d, Fl -domain Ar domain_name
Domain name to generate passphrase for (for use in master-password mode).
.It Fl t, Fl -token Ar token
Token to use for master-passphrase mode.
.El
.Pp
See EXAMPLES for examples on how to use this.

.Sh RANDOMNESS SOURCE
By default, passgen will use the system's built-in random number generator. This is chosen to be a secure source of randomness and is typically the best choice. Passgen can however be easily extended to support different sources of randomness, and the source of randomness can be specified at runtime using the
.Fl -random
command-line flag. This flag takes a textual description of which source to use and any arguments it might need.
.Pp
List of built-in source of randomness and how to specify them:
.Bl -tag -width -indent
.It Ar system
Use the system randomness source. This will pick whichever is the native method of getting access to secure random data on the system that passgen is running on. This is the default source of randomness.

On Linux systems, this will use the
.Xr getrandom 2
system call. On macOS, it uses the
.Xr arc4random_buf 2
system call to read secure, random data. Alternatively, it falls back to reading from
.Ar /dev/urandom .
.It Ar xorshift:seed
Use the xorshift pseudorandom number generator. This is not recommended to produce random sequences, but has the advantage of being deterministic (using the same seed value with the same flags always produces the same output). The seed should be a large, nonzero number.
.It Ar file:/path/to/file
Read the file as source of randomness. This can be useful on systems where the source of randomness has a nonstandard path.
.It Ar zero
Use the zero random number generator. This does not produce random sequences, and is only useful for testing.
.El
.Sh PATTERN
Patterns are regular-expression-like strings that allow specifying the format of
generated passwords. The allowed grammar is a subset of what regular expressions
support.
.Pp
Patterns support any valid Unicode characters. It is also possible to use the escape sequence '\\u{...}' along with a hexidecimal representation of the codepoint. For example, the letter 'a' could also be written '\\u{61}'.
.Pp
Overview of syntax:
.Bl -tag -width -indent
.It Ar abc
Literal: outputs 'abc'.
.It Ar (abc|def|ihj)
Group: outputs one of its members at random. In the first example, the output is any
one of 'abc', 'def', or 'ihj'.  Groups are enclosed in parentheses and
different cases are delimited by a pipe character.  Can contain any other
syntax (literals, groups, ranges, wordlist or markov).
.It Ar [abc], [a-z], [a-z0-9], [a-z0-9!@#]
Range: outputs a single character in the range, chose at random.  Must be
enclosed in square brackets and can contain either individual listed characters
(for example [abc]) or ranges of characters (for example [a-zA-Z]), or both.
When specifying ranges of characters, they should be listed in lexicographical
order.

If a literal dash is desired, it may need to be escaped with a backslash (for
example [a\\-b]). For some languages, using ranges might produce unexpected
results, because the characters do not have sequential Unicode codepoints.
.It Ar a{8}, [a-z]{12}, (\[rs]m{english}-){4}\[rs]m{english}
Repetition: the repetition modifier {n} repeats whatever comes before it the
given amount of times. When putting a repetition mark after any syntax element,
this syntax element will be repeated the specified amount. Denoted by curly
braces with a single or two comma-separated numbers. When two numbers are
given, they are treated as a range, for example '[a-z]{8,12}' will yield
between eight and twelve lowercase alphabetic characters.
.It Ar \[rs]w{name}
Wordlist: this will pick a random word from the wordlist
.Ar name .
It is an error to specify this if a wordlist with the given name has not been loaded. Use the
.Fl -wordlist
flag to load additional wordlists.
.It Ar \[rs]m{name}
Markov: this generates a random, but pronounceable word using a markov chain trained on the wordlist
.Ar name .
It is an error to specify this if a wordlist with the given name has not been loaded. Use the
.Fl -wordlist
flag to load additional wordlists.
.El
.Sh EXAMPLES
Generate a password using the "apple" preset.
.Pp
    $ passgen -p apple1
    fnK-Nvo-Ipj-W3M
.Pp
Generate a passphrase with 16 random lowercase letters.
.Pp
    $ passgen -a 5 "[a-z]{16}"
    xqtrisxewuocrbrx
.Pp
Generate five lowercase alphanumeric passwords with length 12.
.Pp
    $ passgen -a 5 "[a-z0-9]{12}"
    k8taknzsj324
    lywtyf0dw6r9
    qayn8jveduri
    ddtoolrwmlk3
    541kdz29gfdi
.Pp
Generate a passphrase with 16 random alphanumeric letters and symbols, and measure the entropy.
.Pp
    $ passgen -e '[a-zA-Z0-9@#$()_=+]{16}'
    entropy: 98.07 bits
    9oqosbO@iEqH=nT6
.Pp
Generate a passphrase with 5 random words separated by dashes.
.Pp
    $ passgen --wordlist english:/path/to/wordlist.txt '(\[rs]w{english}-){4}\[rs]w{english}'
    nocturnal-evident-latter-is-five
.Pp
Generate a passphrase with 5 random pronounceable words generated by a markov
chain. The advantage of using a markov chain is that you get a higher entropy
for the same length as compared to using random words from a wordlist, while
still being memorable.
.Pp
    $ passgen --wordlist english:/path/to/wordlist.txt '(\[rs]m{english}-){4}\[rs]m{english}'
    vuvulvers-Bachmer-rebacks-perventercizes-exually
.Sh FILES
.Bl -tag -width Ds -indent
.It Pa /etc/passgen.conf
System configuration file for presets and wordlists. See
.Xr passgen.conf 5
for information on the syntax of this file.
.It Pa ~/.config/passgen.conf
User-local configuration for presets and wordlists. See
.Xr passgen.conf 5
for information on the syntax of this file.
.El
.Sh EXIT STATUS
On success, the tool returns 0. When an error is encountered, it will return a different exit code, depending on the error. Note that this list can change between minor releases of the tool.
.Pp
.Bl -tag -width -indent -compact
.It Ar 1
Multiple patterns have been specified on the command line. Only specify a single pattern per run of the tool.
.It Ar 2
There has been an issue allocating the random number generator. When overriding the random number generator to be used, make sure that it exists. When using sandboxing, make sure passgen has access to
.Pa /dev/urandom
or the
.Xr getrandom 2
system call.
.It Ar 3
Error parsing the pattern. Make sure that the pattern is well-formed. The standard output should indicate the position of the error in the pattern.
.It Ar 4
There has been an issue allocating memory, make sure your system has enough memory.
.It Ar 5
An illegal
.Ar AMOUNT
has been specified. Make sure the amount of sequences you have requested is not negative and not zero.
.It Ar 6
Illegal markov chain length has been specified. When overriding the markov chain length, make sure that the length you specify is not negative and not zero.
.It Ar 7
Unrecognized argument flag. Make sure that you are not using an incorrect flag. If your pattern starts with a dash, use '--' to separate command-line flags from your pattern.
.It Ar 8
Preset not found. Make sure that the preset you have specified exists. When it doubt, use the
.Fl -list
command to see the full list of all presets that the tool knows about.
.El
.Sh SEE ALSO
.Xr apg 1 ,
.Xr passwd 1 ,
.Xr passgen.conf 5
.Sh AUTHORS
.An "Patrick M. Elsen" Aq pelsen@xfbs.net
