# makes git submodules work
variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - setup
  - test
  - build
  - release

# rebuild alpine docker container.
docker:alpine:
  image: docker
  stage: setup
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build . -f Dockerfile.alpine -t "$CI_REGISTRY_IMAGE:alpine"
    - docker push "$CI_REGISTRY_IMAGE:alpine"
  only:
    - docker

# rebuild bionic docker container
docker:bionic:
  image: docker
  stage: setup
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build . -f Dockerfile.bionic -t "$CI_REGISTRY_IMAGE:bionic"
    - docker push "$CI_REGISTRY_IMAGE:bionic"
  only:
    - docker

sanitize:
  image: registry.gitlab.com/xfbs/passgen:bionic
  stage: test
  script: scripts/run_sanitizers.sh .

test:bionic:
  image: registry.gitlab.com/xfbs/passgen:bionic
  stage: test
  script:
    - CC=clang ctest --build-and-test
      .
      build-clang
      --build-generator Ninja
      --build-options
      -DCMAKE_BUILD_TYPE=Debug
      -DCODE_COVERAGE=YES
      -DBUILD_GIT_INFO=NO
      --test-command ninja ccov-passgen-test
    - CC=gcc ctest --build-and-test
      .
      build-gcc
      --build-generator Ninja
      --build-options
      -DCMAKE_BUILD_TYPE=Debug
      -DCODE_COVERAGE=YES
      -DBUILD_GIT_INFO=NO
      --test-command ninja ccov-passgen-test
  artifacts:
    paths:
      - build-clang/ccov/passgen-test
      - build-gcc/ccov/passgen-test
    expire_in: 1 week

# build stuff on ubuntu.
build:bionic:debug:
  image: registry.gitlab.com/xfbs/passgen:bionic
  stage: build
  script:
    - mkdir build-bionic-debug && cd build-bionic-debug
    - cmake -GNinja -DCMAKE_BUILD_TYPE=Release ..
    - ninja
    - ./tests/passgen-test
  artifacts:
    paths:
      - build-bionic-debug
    expire_in: 1 week

build:bionic:release:
  image: registry.gitlab.com/xfbs/passgen:bionic
  stage: build
  script:
    - mkdir build-bionic-release && cd build-bionic-release
    - cmake -GNinja -DCMAKE_BUILD_TYPE=Debug ..
    - ninja
    - ./tests/passgen-test
  artifacts:
    paths:
      - build-bionic-release
    expire_in: 1 week

# build stuff on alpine.
build:alpine:release:
  image: registry.gitlab.com/xfbs/passgen:alpine
  stage: build
  script:
    - mkdir -p build-alpine-release && cd build-alpine-release
    - cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC=y ..
    - ninja
    - ./tests/passgen-test
  artifacts:
    paths:
      - build-alpine-release
    expire_in: 1 week

# alpine uses musl libc by default which does not have a backtrace() function
# built-in. therefore, the debug build needs USE_LIBEXECINFO to build.
build:alpine:debug:
  image: registry.gitlab.com/xfbs/passgen:alpine
  stage: build
  script:
    - mkdir build-alpine-debug && cd build-alpine-debug
    - cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DUSE_LIBEXECINFO=y ..
    - ninja
    - ./tests/passgen-test
  artifacts:
    paths:
      - build-alpine-debug
    expire_in: 1 week

release:alpine:
  # no need to fetch submodules for this stage
  variables: {}
  image: registry.gitlab.com/xfbs/passgen:alpine
  stage: release
  dependencies:
    - build:alpine:release
  script:
    - mkdir release
    - cp build-bionic-release/{libpassgen/libpassgen.a,tests/passgen-test,bin/passgen} release
    - tar c -f release.tar.gz -z release
  artifacts:
    paths:
      - release.tar.gz

release:bionic:
  # no need to fetch submodules for this stage
  variables: {}
  image: registry.gitlab.com/xfbs/passgen:alpine
  stage: release
  dependencies:
    - build:bionic:release
  script:
    - mkdir release
    - cp build-bionic-release/{libpassgen/libpassgen.a,tests/passgen-test,bin/passgen} release
    - tar c -f release.tar.gz -z release
  artifacts:
    paths:
      - release.tar.gz
